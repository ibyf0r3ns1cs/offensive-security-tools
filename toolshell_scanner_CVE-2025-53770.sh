#!/bin/bash
###############################################################################
# ToolShell (CVE-2025-53770 / 53771) Implant Scanner
#
# Description :
#   ‚Ä¢ Confirms whether a target host is running SharePoint (header + HTML checks)
#   ‚Ä¢ If SharePoint is present, probes the well-known malicious endpoint
#       ‚Äú/_layouts/15/spinstall0.aspx‚Äù used by the ToolShell exploit chain
#   ‚Ä¢ Flags an implant when the endpoint:
#         ‚Äì Responds 200 OK, and
#         ‚Äì Returns a short (~160 B) body that matches the leaked crypto
#           key pattern: 64-hex | HMACSHA256 | 64-hex | Auto | Framework20SP1
#
# Why :
#   Attackers drop spinstall0.aspx to dump MachineKey secrets.  Possessing
#   these keys lets them sign arbitrary __VIEWSTATE payloads ‚Üí unauth RCE.
#
# Usage      :  ./toolshell_scanner.sh          # (scans default HOST below)
#             :  HOST=foo.gov.il ./toolshell_scanner.sh   # override via env
#
# Requirements:
#   ‚Ä¢ curl  ‚Ä¢ grep  ‚Ä¢ awk  ‚Ä¢ sed  ‚Ä¢ tr  ‚Ä¢ wc
#
# Exit Codes :
#   0 ‚Äì Finished, no fatal errors (implant may or may not be found)
#   1 ‚Äì Required binary missing
#
# Author     : ibyf0r3ns1cs (adapted by ChatGPT) ‚Äì 2025-07-21
###############################################################################

# --- sanity checks ----------------------------------------------------------
for BIN in curl grep awk sed tr wc; do
  command -v "$BIN" >/dev/null 2>&1 || {
    echo "[!] Required binary '$BIN' not found in PATH."
    exit 1
  }
done

# === Configuration ===
HOST="${HOST:-hly.gov.il}"
TARGET="https://${HOST}"
IMPLANT_URL="${TARGET}/_layouts/15/spinstall0.aspx"

echo "[+] Scanning ${HOST} for ToolShell indicators..."

# === Step-1 : SharePoint detection via HTTP header ==========================
VERSION=$(curl -s -I -X OPTIONS --connect-timeout 5 "$TARGET" \
           | grep -i "^MicrosoftSharePointTeamServices:" \
           | awk '{print $2}' | tr -d '\r')

if [[ -n "$VERSION" ]]; then
  echo "[‚úî] SharePoint detected (header). Version: ${VERSION}"
  IS_SHAREPOINT="true"
else
  # === Step-2 : Fallback HTML fingerprint ==================================
  HTML_SIG=$(curl -s --connect-timeout 5 "$TARGET" \
              | grep -Eoi "(Microsoft SharePoint|sp.js|MSOWebPartPage|_layouts/15/)")
  if [[ -n "$HTML_SIG" ]]; then
    echo "[‚úî] SharePoint detected (HTML fingerprint)."
    IS_SHAREPOINT="true"
  else
    echo "[‚úò] SharePoint not detected ‚Äì skipping implant probe."
    IS_SHAREPOINT="false"
  fi
fi

# === Step-3 : Probe implant endpoint if SharePoint confirmed ===============
if [[ "$IS_SHAREPOINT" == "true" ]]; then
  echo "[*] Probing suspected implant URL: ${IMPLANT_URL}"
  RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" --connect-timeout 5 "$IMPLANT_URL")
  BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
  STATUS=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
  SIZE=$(echo -n "$BODY" | wc -c)

  echo "[*] HTTP Status : ${STATUS}"
  echo "[*] Body Size   : ${SIZE} bytes"

  # Expected body length ‚âà 160‚Äì165 B
  if [[ "$STATUS" == "200" && "$SIZE" -le 165 ]]; then
    echo "[!] Suspicious short response detected:"
    echo "$BODY"

    # === Step-4 : Match ToolShell crypto-leak pattern =======================
    if echo "$BODY" | grep -Eq '^[A-Z0-9]{64}\|HMACSHA256\|[A-Z0-9]{64}\|[A-Za-z]+\|Framework'; then
      echo "[üî•] ToolShell implant CONFIRMED ‚Äì leaked MachineKey material!"
    else
      echo "[‚ö†Ô∏è] Short response but pattern did NOT match known implant."
    fi
  else
    echo "[+] No suspicious implant response at ${IMPLANT_URL}."
  fi
fi
